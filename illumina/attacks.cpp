#include "attacks.h"

#include "types.h"

namespace illumina {

const Bitboard g_white_pawn_pushes[] = {
    0x100ULL, 0x200ULL, 0x400ULL, 0x800ULL, 0x1000ULL, 0x2000ULL, 0x4000ULL, 0x8000ULL, 0x1010000ULL,
    0x2020000ULL, 0x4040000ULL, 0x8080000ULL, 0x10100000ULL, 0x20200000ULL, 0x40400000ULL, 0x80800000ULL, 0x1000000ULL,
    0x2000000ULL, 0x4000000ULL, 0x8000000ULL, 0x10000000ULL, 0x20000000ULL, 0x40000000ULL, 0x80000000ULL, 0x100000000ULL,
    0x200000000ULL, 0x400000000ULL, 0x800000000ULL, 0x1000000000ULL, 0x2000000000ULL, 0x4000000000ULL, 0x8000000000ULL, 0x10000000000ULL,
    0x20000000000ULL, 0x40000000000ULL, 0x80000000000ULL, 0x100000000000ULL, 0x200000000000ULL, 0x400000000000ULL, 0x800000000000ULL, 0x1000000000000ULL,
    0x2000000000000ULL, 0x4000000000000ULL, 0x8000000000000ULL, 0x10000000000000ULL, 0x20000000000000ULL, 0x40000000000000ULL, 0x80000000000000ULL, 0x100000000000000ULL,
    0x200000000000000ULL, 0x400000000000000ULL, 0x800000000000000ULL, 0x1000000000000000ULL, 0x2000000000000000ULL, 0x4000000000000000ULL, 0x8000000000000000ULL, 0x0ULL,
    0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL,
};

const Bitboard g_black_pawn_pushes[] = {
    0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x1ULL,
    0x2ULL, 0x4ULL, 0x8ULL, 0x10ULL, 0x20ULL, 0x40ULL, 0x80ULL, 0x100ULL,
    0x200ULL, 0x400ULL, 0x800ULL, 0x1000ULL, 0x2000ULL, 0x4000ULL, 0x8000ULL, 0x10000ULL,
    0x20000ULL, 0x40000ULL, 0x80000ULL, 0x100000ULL, 0x200000ULL, 0x400000ULL, 0x800000ULL, 0x1000000ULL,
    0x2000000ULL, 0x4000000ULL, 0x8000000ULL, 0x10000000ULL, 0x20000000ULL, 0x40000000ULL, 0x80000000ULL, 0x100000000ULL,
    0x200000000ULL, 0x400000000ULL, 0x800000000ULL, 0x1000000000ULL, 0x2000000000ULL, 0x4000000000ULL, 0x8000000000ULL, 0x10100000000ULL,
    0x20200000000ULL, 0x40400000000ULL, 0x80800000000ULL, 0x101000000000ULL, 0x202000000000ULL, 0x404000000000ULL, 0x808000000000ULL, 0x1000000000000ULL,
    0x2000000000000ULL, 0x4000000000000ULL, 0x8000000000000ULL, 0x10000000000000ULL, 0x20000000000000ULL, 0x40000000000000ULL, 0x80000000000000ULL,
};

const Bitboard g_white_pawn_captures[] = {
    0x200ULL, 0x500ULL, 0xa00ULL, 0x1400ULL, 0x2800ULL, 0x5000ULL, 0xa000ULL, 0x4000ULL, 0x20000ULL,
    0x50000ULL, 0xa0000ULL, 0x140000ULL, 0x280000ULL, 0x500000ULL, 0xa00000ULL, 0x400000ULL, 0x2000000ULL,
    0x5000000ULL, 0xa000000ULL, 0x14000000ULL, 0x28000000ULL, 0x50000000ULL, 0xa0000000ULL, 0x40000000ULL, 0x200000000ULL,
    0x500000000ULL, 0xa00000000ULL, 0x1400000000ULL, 0x2800000000ULL, 0x5000000000ULL, 0xa000000000ULL, 0x4000000000ULL, 0x20000000000ULL,
    0x50000000000ULL, 0xa0000000000ULL, 0x140000000000ULL, 0x280000000000ULL, 0x500000000000ULL, 0xa00000000000ULL, 0x400000000000ULL, 0x2000000000000ULL,
    0x5000000000000ULL, 0xa000000000000ULL, 0x14000000000000ULL, 0x28000000000000ULL, 0x50000000000000ULL, 0xa0000000000000ULL, 0x40000000000000ULL, 0x200000000000000ULL,
    0x500000000000000ULL, 0xa00000000000000ULL, 0x1400000000000000ULL, 0x2800000000000000ULL, 0x5000000000000000ULL, 0xa000000000000000ULL, 0x4000000000000000ULL, 0x0ULL,
    0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL,
};

const Bitboard g_black_pawn_captures[] = {
    0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x2ULL,
    0x5ULL, 0xaULL, 0x14ULL, 0x28ULL, 0x50ULL, 0xa0ULL, 0x40ULL, 0x200ULL,
    0x500ULL, 0xa00ULL, 0x1400ULL, 0x2800ULL, 0x5000ULL, 0xa000ULL, 0x4000ULL, 0x20000ULL,
    0x50000ULL, 0xa0000ULL, 0x140000ULL, 0x280000ULL, 0x500000ULL, 0xa00000ULL, 0x400000ULL, 0x2000000ULL,
    0x5000000ULL, 0xa000000ULL, 0x14000000ULL, 0x28000000ULL, 0x50000000ULL, 0xa0000000ULL, 0x40000000ULL, 0x200000000ULL,
    0x500000000ULL, 0xa00000000ULL, 0x1400000000ULL, 0x2800000000ULL, 0x5000000000ULL, 0xa000000000ULL, 0x4000000000ULL, 0x20000000000ULL,
    0x50000000000ULL, 0xa0000000000ULL, 0x140000000000ULL, 0x280000000000ULL, 0x500000000000ULL, 0xa00000000000ULL, 0x400000000000ULL, 0x2000000000000ULL,
    0x5000000000000ULL, 0xa000000000000ULL, 0x14000000000000ULL, 0x28000000000000ULL, 0x50000000000000ULL, 0xa0000000000000ULL, 0x40000000000000ULL,
};

const Bitboard g_knight_attacks[] = {
    0x20400ULL, 0x50800ULL, 0xa1100ULL, 0x142200ULL, 0x284400ULL, 0x508800ULL, 0xa01000ULL, 0x402000ULL, 0x2040004ULL,
    0x5080008ULL, 0xa110011ULL, 0x14220022ULL, 0x28440044ULL, 0x50880088ULL, 0xa0100010ULL, 0x40200020ULL, 0x204000402ULL,
    0x508000805ULL, 0xa1100110aULL, 0x1422002214ULL, 0x2844004428ULL, 0x5088008850ULL, 0xa0100010a0ULL, 0x4020002040ULL, 0x20400040200ULL,
    0x50800080500ULL, 0xa1100110a00ULL, 0x142200221400ULL, 0x284400442800ULL, 0x508800885000ULL, 0xa0100010a000ULL, 0x402000204000ULL, 0x2040004020000ULL,
    0x5080008050000ULL, 0xa1100110a0000ULL, 0x14220022140000ULL, 0x28440044280000ULL, 0x50880088500000ULL, 0xa0100010a00000ULL, 0x40200020400000ULL, 0x204000402000000ULL,
    0x508000805000000ULL, 0xa1100110a000000ULL, 0x1422002214000000ULL, 0x2844004428000000ULL, 0x5088008850000000ULL, 0xa0100010a0000000ULL, 0x4020002040000000ULL, 0x400040200000000ULL,
    0x800080500000000ULL, 0x1100110a00000000ULL, 0x2200221400000000ULL, 0x4400442800000000ULL, 0x8800885000000000ULL, 0x100010a000000000ULL, 0x2000204000000000ULL, 0x4020000000000ULL,
    0x8050000000000ULL, 0x110a0000000000ULL, 0x22140000000000ULL, 0x44280000000000ULL, 0x88500000000000ULL, 0x10a00000000000ULL, 0x20400000000000ULL,
};

const Bitboard g_king_attacks[] = {
    0x302ULL, 0x705ULL, 0xe0aULL, 0x1c14ULL, 0x3828ULL, 0x7050ULL, 0xe0a0ULL, 0xc040ULL, 0x30203ULL,
    0x70507ULL, 0xe0a0eULL, 0x1c141cULL, 0x382838ULL, 0x705070ULL, 0xe0a0e0ULL, 0xc040c0ULL, 0x3020300ULL,
    0x7050700ULL, 0xe0a0e00ULL, 0x1c141c00ULL, 0x38283800ULL, 0x70507000ULL, 0xe0a0e000ULL, 0xc040c000ULL, 0x302030000ULL,
    0x705070000ULL, 0xe0a0e0000ULL, 0x1c141c0000ULL, 0x3828380000ULL, 0x7050700000ULL, 0xe0a0e00000ULL, 0xc040c00000ULL, 0x30203000000ULL,
    0x70507000000ULL, 0xe0a0e000000ULL, 0x1c141c000000ULL, 0x382838000000ULL, 0x705070000000ULL, 0xe0a0e0000000ULL, 0xc040c0000000ULL, 0x3020300000000ULL,
    0x7050700000000ULL, 0xe0a0e00000000ULL, 0x1c141c00000000ULL, 0x38283800000000ULL, 0x70507000000000ULL, 0xe0a0e000000000ULL, 0xc040c000000000ULL, 0x302030000000000ULL,
    0x705070000000000ULL, 0xe0a0e0000000000ULL, 0x1c141c0000000000ULL, 0x3828380000000000ULL, 0x7050700000000000ULL, 0xe0a0e00000000000ULL, 0xc040c00000000000ULL, 0x203000000000000ULL,
    0x507000000000000ULL, 0xa0e000000000000ULL, 0x141c000000000000ULL, 0x2838000000000000ULL, 0x5070000000000000ULL, 0xa0e0000000000000ULL, 0x40c0000000000000ULL,
};

const Bitboard g_bishop_pseudo_attacks[] = {
    0x8040201008040200ULL, 0x80402010080500ULL, 0x804020110a00ULL, 0x8041221400ULL, 0x182442800ULL, 0x10204885000ULL, 0x102040810a000ULL, 0x102040810204000ULL, 0x4020100804020002ULL,
    0x8040201008050005ULL, 0x804020110a000aULL, 0x804122140014ULL, 0x18244280028ULL, 0x1020488500050ULL, 0x102040810a000a0ULL, 0x204081020400040ULL, 0x2010080402000204ULL,
    0x4020100805000508ULL, 0x804020110a000a11ULL, 0x80412214001422ULL, 0x1824428002844ULL, 0x102048850005088ULL, 0x2040810a000a010ULL, 0x408102040004020ULL, 0x1008040200020408ULL,
    0x2010080500050810ULL, 0x4020110a000a1120ULL, 0x8041221400142241ULL, 0x182442800284482ULL, 0x204885000508804ULL, 0x40810a000a01008ULL, 0x810204000402010ULL, 0x804020002040810ULL,
    0x1008050005081020ULL, 0x20110a000a112040ULL, 0x4122140014224180ULL, 0x8244280028448201ULL, 0x488500050880402ULL, 0x810a000a0100804ULL, 0x1020400040201008ULL, 0x402000204081020ULL,
    0x805000508102040ULL, 0x110a000a11204080ULL, 0x2214001422418000ULL, 0x4428002844820100ULL, 0x8850005088040201ULL, 0x10a000a010080402ULL, 0x2040004020100804ULL, 0x200020408102040ULL,
    0x500050810204080ULL, 0xa000a1120408000ULL, 0x1400142241800000ULL, 0x2800284482010000ULL, 0x5000508804020100ULL, 0xa000a01008040201ULL, 0x4000402010080402ULL, 0x2040810204080ULL,
    0x5081020408000ULL, 0xa112040800000ULL, 0x14224180000000ULL, 0x28448201000000ULL, 0x50880402010000ULL, 0xa0100804020100ULL, 0x40201008040201ULL,
};

const Bitboard g_rook_pseudo_attacks[] = {
    0x1010101010101feULL, 0x2020202020202fdULL, 0x4040404040404fbULL, 0x8080808080808f7ULL, 0x10101010101010efULL, 0x20202020202020dfULL, 0x40404040404040bfULL, 0x808080808080807fULL, 0x10101010101fe01ULL,
    0x20202020202fd02ULL, 0x40404040404fb04ULL, 0x80808080808f708ULL, 0x101010101010ef10ULL, 0x202020202020df20ULL, 0x404040404040bf40ULL, 0x8080808080807f80ULL, 0x101010101fe0101ULL,
    0x202020202fd0202ULL, 0x404040404fb0404ULL, 0x808080808f70808ULL, 0x1010101010ef1010ULL, 0x2020202020df2020ULL, 0x4040404040bf4040ULL, 0x80808080807f8080ULL, 0x1010101fe010101ULL,
    0x2020202fd020202ULL, 0x4040404fb040404ULL, 0x8080808f7080808ULL, 0x10101010ef101010ULL, 0x20202020df202020ULL, 0x40404040bf404040ULL, 0x808080807f808080ULL, 0x10101fe01010101ULL,
    0x20202fd02020202ULL, 0x40404fb04040404ULL, 0x80808f708080808ULL, 0x101010ef10101010ULL, 0x202020df20202020ULL, 0x404040bf40404040ULL, 0x8080807f80808080ULL, 0x101fe0101010101ULL,
    0x202fd0202020202ULL, 0x404fb0404040404ULL, 0x808f70808080808ULL, 0x1010ef1010101010ULL, 0x2020df2020202020ULL, 0x4040bf4040404040ULL, 0x80807f8080808080ULL, 0x1fe010101010101ULL,
    0x2fd020202020202ULL, 0x4fb040404040404ULL, 0x8f7080808080808ULL, 0x10ef101010101010ULL, 0x20df202020202020ULL, 0x40bf404040404040ULL, 0x807f808080808080ULL, 0xfe01010101010101ULL,
    0xfd02020202020202ULL, 0xfb04040404040404ULL, 0xf708080808080808ULL, 0xef10101010101010ULL, 0xdf20202020202020ULL, 0xbf40404040404040ULL, 0x7f80808080808080ULL,
};

const Bitboard g_bishop_masks[] = {
    0x40201008040200ULL, 0x402010080400ULL, 0x4020100a00ULL, 0x40221400ULL, 0x2442800ULL, 0x204085000ULL, 0x20408102000ULL, 0x2040810204000ULL, 0x20100804020000ULL,
    0x40201008040000ULL, 0x4020100a0000ULL, 0x4022140000ULL, 0x244280000ULL, 0x20408500000ULL, 0x2040810200000ULL, 0x4081020400000ULL, 0x10080402000200ULL,
    0x20100804000400ULL, 0x4020100a000a00ULL, 0x402214001400ULL, 0x24428002800ULL, 0x2040850005000ULL, 0x4081020002000ULL, 0x8102040004000ULL, 0x8040200020400ULL,
    0x10080400040800ULL, 0x20100a000a1000ULL, 0x40221400142200ULL, 0x2442800284400ULL, 0x4085000500800ULL, 0x8102000201000ULL, 0x10204000402000ULL, 0x4020002040800ULL,
    0x8040004081000ULL, 0x100a000a102000ULL, 0x22140014224000ULL, 0x44280028440200ULL, 0x8500050080400ULL, 0x10200020100800ULL, 0x20400040201000ULL, 0x2000204081000ULL,
    0x4000408102000ULL, 0xa000a10204000ULL, 0x14001422400000ULL, 0x28002844020000ULL, 0x50005008040200ULL, 0x20002010080400ULL, 0x40004020100800ULL, 0x20408102000ULL,
    0x40810204000ULL, 0xa1020400000ULL, 0x142240000000ULL, 0x284402000000ULL, 0x500804020000ULL, 0x201008040200ULL, 0x402010080400ULL, 0x2040810204000ULL,
    0x4081020400000ULL, 0xa102040000000ULL, 0x14224000000000ULL, 0x28440200000000ULL, 0x50080402000000ULL, 0x20100804020000ULL, 0x40201008040200ULL,
};

const Bitboard g_rook_masks[] = {
    0x0ULL, 0x2020202020200ULL, 0x4040404040400ULL, 0x8080808080800ULL, 0x10101010101000ULL, 0x20202020202000ULL, 0x40404040404000ULL, 0x0ULL, 0x7e00ULL,
    0x2020202027c00ULL, 0x4040404047a00ULL, 0x8080808087600ULL, 0x10101010106e00ULL, 0x20202020205e00ULL, 0x40404040403e00ULL, 0x7e00ULL, 0x7e0000ULL,
    0x20202027c0200ULL, 0x40404047a0400ULL, 0x8080808760800ULL, 0x101010106e1000ULL, 0x202020205e2000ULL, 0x404040403e4000ULL, 0x7e0000ULL, 0x7e000000ULL,
    0x202027c020200ULL, 0x404047a040400ULL, 0x8080876080800ULL, 0x1010106e101000ULL, 0x2020205e202000ULL, 0x4040403e404000ULL, 0x7e000000ULL, 0x7e00000000ULL,
    0x2027c02020200ULL, 0x4047a04040400ULL, 0x8087608080800ULL, 0x10106e10101000ULL, 0x20205e20202000ULL, 0x40403e40404000ULL, 0x7e00000000ULL, 0x7e0000000000ULL,
    0x27c0202020200ULL, 0x47a0404040400ULL, 0x8760808080800ULL, 0x106e1010101000ULL, 0x205e2020202000ULL, 0x403e4040404000ULL, 0x7e0000000000ULL, 0x7e000000000000ULL,
    0x7c020202020200ULL, 0x7a040404040400ULL, 0x76080808080800ULL, 0x6e101010101000ULL, 0x5e202020202000ULL, 0x3e404040404000ULL, 0x7e000000000000ULL, 0x0ULL,
    0x2020202020200ULL, 0x4040404040400ULL, 0x8080808080800ULL, 0x10101010101000ULL, 0x20202020202000ULL, 0x40404040404000ULL, 0x0ULL,
};

Bitboard g_bishop_attacks[SQ_COUNT][512] {};
Bitboard g_rook_attacks[SQ_COUNT][512]   {};

static Bitboard compute_ray_attacks_direction(Square src_square,
                                              Direction direction,
                                              Bitboard occupancy) {
    Bitboard attacks = 0;
    Square current_square = src_square;

    while (true) {
        BoardFile file = square_file(current_square);
        BoardRank rank = square_rank(current_square);

        if ((direction == DIR_NORTH || direction == DIR_NORTHWEST || direction == DIR_NORTHEAST)
            && rank == RNK_8) {
            break;
        }
        else if ((direction == DIR_SOUTH || direction == DIR_SOUTHWEST || direction == DIR_SOUTHEAST)
                 && rank == RNK_1) {
            break;
        }

        if ((direction == DIR_EAST || direction == DIR_NORTHEAST || direction == DIR_SOUTHEAST)
            && file >= FL_H) {
            break;
        }
        else if ((direction == DIR_WEST || direction == DIR_NORTHWEST || direction == DIR_SOUTHWEST)
                 && file <= FL_A) {
            break;
        }

        current_square += direction;

        if (current_square >= SQ_COUNT || current_square < 0) {
            break;
        }

        attacks = set_bit(attacks, current_square);

        if (occupancy & BIT(current_square)) {
            break;
        }
    }

    return attacks;
}

static Bitboard compute_ray_attacks(Square src_square,
                             Bitboard pseudo_attacks,
                             Bitboard occupancy) {
    Bitboard attacks = 0;

    for (Direction d: DIRECTIONS) {
        attacks |= compute_ray_attacks_direction(src_square, d, occupancy);
    }

    attacks &= pseudo_attacks;

    return attacks;
}

static void generate_slider_attacks(const Bitboard masks[SQ_COUNT],
                                    const Bitboard all_pseudo_attacks[SQ_COUNT],
                                    Bitboard attacks[SQ_COUNT][512]) {
    for (Square s = 0; s < SQ_COUNT; ++s) {
        Bitboard mask           = masks[s];
        Bitboard pseudo_attacks = all_pseudo_attacks[s];

        // We can use the Carry-Rippler algorithm to extract all relevant
        // occupancies from a pseudo-attacks bitboard. Note that we can ignore
        // bits on the outer edges since they would never block any other square.
        Bitboard occ = 0;
        do {
            ui64 key = _pext_u64(occ, mask);
            Bitboard ray_attacks = compute_ray_attacks(s, pseudo_attacks, occ);
            attacks[s][key] = ray_attacks;
            occ = (occ - mask) & mask;
        } while (occ);
    }
}

void init_attacks() {
    generate_slider_attacks(g_bishop_masks, g_bishop_pseudo_attacks, g_bishop_attacks);
    generate_slider_attacks(g_rook_masks, g_rook_pseudo_attacks, g_rook_attacks);
}

} // illumina
