//
// Declare here any desired tunable constants. These tunable constants will be exposed as
// UCI options on builds in which TUNING_BUILD is defined. On non-tuning builds, tunable
// constants become constexpr values.
//
// To declare a tunable constant, simply add a line:
//    TUNABLE_VALUE(name, type, base_value, min_value, max_value, step).
// The only supported tunable value types are int and double.
// Double tunable values will be exposed as spin (integer) UCI options, but with their values
// multiplied by 1000. For example: a double tunable value of 3.652, will be exposed as an integer
// 3652, just like a double of value 0.0541 will be exposed as 54.
//

#ifndef TUNABLE_VALUE
#define TUNABLE_VALUE(name, type, base_value, min_value, max_value, step)
#endif

//
// Search constants
//

// Aspiration windows
TUNABLE_VALUE(ASP_WIN_WINDOW, int, 42, 25, 59, 4);
TUNABLE_VALUE(ASP_WIN_MIN_DEPTH, int, 6, 4, 8, 1);

// Reverse futility pruning
TUNABLE_VALUE(RFP_MAX_DEPTH, int, 7, 5, 9, 1);
TUNABLE_VALUE(RFP_MARGIN_BASE, int, 36, 21, 49, 2);
TUNABLE_VALUE(RFP_DEPTH_MULT, int, 65, 42, 98, 4);

// Null move pruning
TUNABLE_VALUE(NMP_MIN_PIECES, int, 4, 3, 5, 1);
TUNABLE_VALUE(NMP_MIN_DEPTH, int, 2, 1, 3, 1);
TUNABLE_VALUE(NMP_EVAL_DELTA_DIVISOR, int, 208, 127, 297, 11);
TUNABLE_VALUE(NMP_BASE_DEPTH_RED, int, 2, 1, 3, 1);

// Late move pruning
TUNABLE_VALUE(LMP_BASE_MAX_DEPTH, int, 7, 5, 9, 1);
TUNABLE_VALUE(LMP_BASE_IDX_NON_IMPROVING, double, 3.0799, 1.84, 4.30, 0.15);
TUNABLE_VALUE(LMP_DEPTH_FACTOR_NON_IMPROVING, double, 0.5693, 0.34, 0.79, 0.03);
TUNABLE_VALUE(LMP_BASE_IDX_IMPROVING, double, 4.2041, 2.52, 5.88, 0.21);
TUNABLE_VALUE(LMP_DEPTH_FACTOR_IMPROVING, double, 1.2254, 0.74, 1.74, 0.06);

// Futility pruning
TUNABLE_VALUE(FP_MAX_DEPTH, int, 6, 4, 8, 1);
TUNABLE_VALUE(FP_MARGIN, int, 95, 54, 126, 5);

// Late move reductions
TUNABLE_VALUE(LMR_MIN_DEPTH, int, 2, 1, 3, 1);
TUNABLE_VALUE(LMR_MIN_MOVE_IDX, int, 1, 1, 2, 1);
TUNABLE_VALUE(LMR_REDUCTIONS_BASE, double, 1.1122, 0.67, 1.56, 0.06);
TUNABLE_VALUE(LMR_REDUCTIONS_DIVISOR, double, 261.1894, 158.0, 368.0, 13.0);
TUNABLE_VALUE(LMR_BAD_HISTORY_THRESHOLD, int, -394, -556, -238, 20);
TUNABLE_VALUE(LMR_STABLE_ALPHA_THRESHOLD, int, 231, 140, 326, 12);

// Internal iterative reductions
TUNABLE_VALUE(IIR_MIN_DEPTH, int, 4, 3, 5, 1);
TUNABLE_VALUE(IIR_DEPTH_RED, int, 1, 1, 2, 1);

// SEE pruning (pvs())
TUNABLE_VALUE(SEE_PRUNING_MAX_DEPTH, int, 8, 5, 11, 1);
TUNABLE_VALUE(SEE_PRUNING_THRESHOLD, int, -1, -10, 10, 1);

// QSEE pruning
TUNABLE_VALUE(QSEE_PRUNING_THRESHOLD, int, -1, -10, 10, 1);

// Singular Extensions
TUNABLE_VALUE(SE_DOUBLE_EXT_MARGIN, int, 15, 9, 21, 1);

// ProbCut
TUNABLE_VALUE(PROBCUT_BETA_MARGIN, int, 180, 100, 500, 25);
TUNABLE_VALUE(PROBCUT_DEPTH, int, 5, 0, 10, 1);

//
// Time manager constants
//

// Depth cutoff
TUNABLE_VALUE(TM_CUTOFF_MIN_DEPTH, int, 10, 6, 14, 1);
TUNABLE_VALUE(TM_CUTOFF_HARD_BOUND_FACTOR, double, 0.6747, 0.40, 0.93, 0.03);

// Stable iterations
TUNABLE_VALUE(TM_STABILITY_MIN_CP_DELTA, int, -15, -21, -9, 1);
TUNABLE_VALUE(TM_STABILITY_MAX_CP_DELTA, int, 51, 31, 73, 3);
TUNABLE_VALUE(TM_STABILITY_MIN_DEPTH, int, 10, 6, 14, 1);
TUNABLE_VALUE(TM_STABILITY_SB_RED_MIN_ITER, int, 7, 5, 9, 1);
TUNABLE_VALUE(TM_STABILITY_SB_RED_FACTOR, double, 0.7938, 0.43, 1.01, 0.05);
TUNABLE_VALUE(TM_STABILITY_SB_EXT_FACTOR, int, 118, 68, 160, 6);

//
// Move history constants
//
TUNABLE_VALUE(MV_HIST_QUIET_HIGH_DEPTH_THRESHOLD, int, 12, 7, 17, 1);
TUNABLE_VALUE(MV_HIST_QUIET_HIGH_DEPTH_FACTOR, int, 32, 19, 45, 2);
TUNABLE_VALUE(MV_HIST_REGULAR_QHIST_WEIGHT, int, 984, 580, 1354, 48);
TUNABLE_VALUE(MV_HIST_COUNTER_MOVE_WEIGHT, int, 1631, 957, 2233, 80);
