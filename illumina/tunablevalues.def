//
// Declare here any desired tunable constants. These tunable constants will be exposed as
// UCI options on builds in which TUNING_BUILD is defined. On non-tuning builds, tunable
// constants become constexpr values instead.
//
// To declare a tunable constant, simply add a line: TUNABLE_VALUE(your_value_name, your_value_type, your_base_value).
// The only supported tunable value types are: int.
//

//
// Search constants
//

// Aspiration windows
TUNABLE_VALUE(ASP_WIN_WINDOW, int, 50)

// Reverse futility pruning
TUNABLE_VALUE(RFP_MAX_DEPTH, int, 7)
TUNABLE_VALUE(RFP_MARGIN_BASE, int, 50)
TUNABLE_VALUE(RFP_DEPTH_MULT, int, 70)

// Null move pruning
TUNABLE_VALUE(NMP_MIN_PIECES, int, 4)
TUNABLE_VALUE(NMP_MIN_DEPTH, int, 3)
TUNABLE_VALUE(NMP_EVAL_DELTA_DIVISOR, int, 200)
TUNABLE_VALUE(NMP_BASE_DEPTH_RED, int, 2)

// Late move pruning
TUNABLE_VALUE(LMP_BASE_MIN_DEPTH, int, 8)

// SEE pruning (pvs())
TUNABLE_VALUE(SEE_PRUNING_DEPTH, int, 8)
TUNABLE_VALUE(SEE_PRUNING_THRESHOLD, int, -2);